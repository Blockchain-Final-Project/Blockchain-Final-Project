package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Asset extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040526040805190810160405280600481526020017f62616e6b00000000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000c30565b506201869f6001553480156200006657600080fd5b506200008062000143640100000000026401000000009004565b506200013c60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200011f5780601f10620000f3576101008083540402835291602001916200011f565b820191906000526020600020905b8154815290600101906020018083116200010157829003601f168201915b5050505050600154620002ef640100000000026401000000009004565b5062001332565b600080600080915061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620001a590620011d4565b602060405180830381600087803b158015620001c057600080fd5b505af1158015620001d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001fb919081019062000dfd565b820191508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200025490620010d9565b602060405180830381600087803b1580156200026f57600080fd5b505af115801562000284573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002aa919081019062000dfd565b820191507fc05713dbcd17391bbb72ab9274db1c5c51ea90f9ddb94d09a41d1f68c07b4d4e82604051620002df919062000ff3565b60405180910390a1819250505090565b600080600080600080600080955060009450600093506200031f89620007b3640100000000026401000000009004565b809550819650505060008514151562000743576200034b62000b71640100000000026401000000009004565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620003b257600080fd5b505af1158015620003c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620003ed919081019062000da5565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000446919062001179565b600060405180830381600087803b1580156200046157600080fd5b505af115801562000476573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620004d1919062001147565b600060405180830381600087803b158015620004ec57600080fd5b505af115801562000501573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368a846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200055e929190620010a5565b602060405180830381600087803b1580156200057957600080fd5b505af11580156200058e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620005b4919081019062000dfd565b90506001811415620005ca57600095506200073d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95508273ffffffffffffffffffffffffffffffffffffffff166328bb21178a8573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200066f57600080fd5b505af115801562000684573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620006aa919081019062000d4d565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620006e592919062001071565b602060405180830381600087803b1580156200070057600080fd5b505af115801562000715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200073b919081019062000dfd565b505b62000767565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7fc80814306a567881c5c316a4db1321b1f7c3d59f2c0c3baa0dd2013cdef90f34868a8a6040516200079c9392919062001010565b60405180910390a185965050505050505092915050565b600080600080600080620007d562000b71640100000000026401000000009004565b93508373ffffffffffffffffffffffffffffffffffffffff1663e8434e39888673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200085957600080fd5b505af11580156200086e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000894919081019062000d4d565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620008cf92919062001071565b602060405180830381600087803b158015620008ea57600080fd5b505af1158015620008ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000925919081019062000d79565b9250600091508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200099057600080fd5b505af1158015620009a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620009cb919081019062000dfd565b6000141562000a03577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828191509550955062000b68565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000a5b919062001054565b602060405180830381600087803b15801562000a7657600080fd5b505af115801562000a8b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000ab1919081019062000da5565b905060008173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000b0a9062001125565b602060405180830381600087803b15801562000b2557600080fd5b505af115801562000b3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000b60919081019062000dfd565b819150955095505b50505050915091565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000bd090620011b2565b602060405180830381600087803b15801562000beb57600080fd5b505af115801562000c00573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000c26919081019062000dd1565b9050809250505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000c7357805160ff191683800117855562000ca4565b8280016001018555821562000ca4579182015b8281111562000ca357825182559160200191906001019062000c86565b5b50905062000cb3919062000cb7565b5090565b62000cdc91905b8082111562000cd857600081600090555060010162000cbe565b5090565b90565b600062000ced825162001255565b905092915050565b600062000d03825162001269565b905092915050565b600062000d1982516200127d565b905092915050565b600062000d2f825162001291565b905092915050565b600062000d458251620012a5565b905092915050565b60006020828403121562000d6057600080fd5b600062000d708482850162000cdf565b91505092915050565b60006020828403121562000d8c57600080fd5b600062000d9c8482850162000cf5565b91505092915050565b60006020828403121562000db857600080fd5b600062000dc88482850162000d0b565b91505092915050565b60006020828403121562000de457600080fd5b600062000df48482850162000d21565b91505092915050565b60006020828403121562000e1057600080fd5b600062000e208482850162000d37565b91505092915050565b62000e3481620012af565b82525050565b62000e4581620012c3565b82525050565b62000e56816200124b565b82525050565b62000e6781620012d7565b82525050565b600062000e7a8262001220565b80845262000e90816020860160208601620012eb565b62000e9b8162001321565b602085010191505092915050565b6000600982527f745f7265636569707400000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f61737365745f76616c75650000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601f82527f626f72726f7765722c206465627465652c206d6f6e65792c20737461747573006020830152604082019050919050565b6000600782527f6163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f745f6173736574000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006020820190506200100a","","158015610cc957600080fd5b505af1158015610cdd573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748b87016040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d389190613c4f565b600060405180830381600087803b158015610d5257600080fd5b505af1158015610d66573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18c838773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dec57600080fd5b505af1158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e249190810190613216565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e5e93929190613a77565b602060405180830381600087803b158015610e7857600080fd5b505af1158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610eb091908101906132ba565b507f3a5c0c275bb95165abf2ffef5511a8c0bdd80dedb12a4e92960483b73aaee8a7888d8d8d604051610ee69493929190613941565b60405180910390a18798505b50505050505050509392505050565b600060608060008060006060806000610f18613039565b95508573ffffffffffffffffffffffffffffffffffffffff1663e8434e398b8873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f9b57600080fd5b505af1158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fd39190810190613216565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161100c929190613a17565b602060405180830381600087803b15801561102657600080fd5b505af115801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061105e919081019061323f565b94506000935060026040519080825280602002602001820160405280156110945781602001602082028038833980820191505090505b50925060026040519080825280602002602001820160405280156110cc57816020015b60608152602001906001900390816110b75790505b5091508473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561113357600080fd5b505af1158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061116b91908101906132ba565b600014156111a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350838383985098509850611568565b8473ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111fa91906139fc565b602060405180830381600087803b15801561121457600080fd5b505af1158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061124c9190810190613268565b90508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112a190613d9b565b602060405180830381600087803b1580156112bb57600080fd5b505af11580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112f391908101906132ba565b83600081518110151561130257fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161136390613cb2565b602060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113b591908101906132ba565b8360018151811015156113c457fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161142590613ba5565b600060405180830381600087803b15801561143f57600080fd5b505af1158015611453573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061147c9190810190613324565b82600081518110151561148b57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114eb90613ab5565b600060405180830381600087803b15801561150557600080fd5b505af1158015611519573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506115429190810190613324565b82600181518110151561155157fe5b906020019060200201819052508383839850985098505b5050505050509193909250565b6000806000806000809350600092506000915060009050611595876102b4565b809250819350505060008214156116d6578581121515611669576115f088886040805190810160405280600481526020017f62616e6b0000000000000000000000000000000000000000000000000000000081525089611ef7565b9250600083141515611664577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd93507f437e4f38537082e412dac023bac183932646cf22c00ec1fbad55d563b188d813848989896040516116549493929190613941565b60405180910390a183945061173b565b6116d1565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93507f437e4f38537082e412dac023bac183932646cf22c00ec1fbad55d563b188d813848989896040516116c19493929190613941565b60405180910390a183945061173b565b6116fa565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93505b7f437e4f38537082e412dac023bac183932646cf22c00ec1fbad55d563b188d8138489898960405161172f9493929190613941565b60405180910390a18394505b505050509392505050565b60008060006060806000806000806000975060009650600260405190808252806020026020018201604052801561178c5781602001602082028038833980820191505090505b50955060026040519080825280602002602001820160405280156117c457816020015b60608152602001906001900390816117af5790505b5094506117d08b610f01565b8097508198508299505050506000871415611e86578560018151811015156117f457fe5b906020019060200201518a131561186b577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97507f9d213b01f0d0c7a9b4f5a64301a05b4c2a5293c38f05dda3880b6f7ad837c7e3888c8c60405161185b93929190613903565b60405180910390a1879850611ee9565b611873613039565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118d957600080fd5b505af11580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119119190810190613268565b92508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119689190613c7d565b600060405180830381600087803b15801561198257600080fd5b505af1158015611996573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168660008151811015156119c557fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a079190613bc5565b600060405180830381600087803b158015611a2157600080fd5b505af1158015611a35573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516866001815181101515611a6457fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611aa69190613ad5565b600060405180830381600087803b158015611ac057600080fd5b505af1158015611ad4573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876000815181101515611b0357fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b459190613dbb565b600060405180830381600087803b158015611b5f57600080fd5b505af1158015611b73573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748b886001815181101515611ba357fe5b90602001906020020151036040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611be69190613cd2565b600060405180830381600087803b158015611c0057600080fd5b505af1158015611c14573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18c858773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c9a57600080fd5b505af1158015611cae573d6000803e3d6000fd5b505050506040513d601f19601f8201","","","6000830152613ccb8161379e565b9050919050565b60006040820190508181036000830152613ceb8161379e565b9050613cfa60208301846135ca565b92915050565b60006040820190508181036000830152613d19816137d5565b90508181036020830152613d2d81846135e8565b905092915050565b60006020820190508181036000830152613d4e8161380c565b9050919050565b60006060820190508181036000830152613d6e8161380c565b90508181036020830152613d81816137d5565b90508181036040830152613d94816136f9565b9050919050565b60006020820190508181036000830152613db481613843565b9050919050565b60006040820190508181036000830152613dd481613843565b9050613de360208301846135ca565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613e0c57600080fd5b8060405250919050565b600067ffffffffffffffff821115613e2d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613ed782613ea2565b9050919050565b6000613ee982613ea2565b9050919050565b6000613efb82613ea2565b9050919050565b6000613f0d82613ea2565b9050919050565b6000819050919050565b6000613f2982613ea2565b9050919050565b6000613f3b82613ea2565b9050919050565b6000613f4d82613ec2565b9050919050565b82818337600083830152505050565b60005b83811015613f81578082015181840152602081019050613f66565b83811115613f90576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820d1b167519d871b14f16a11813b2fd8b5cd305d1b89693603ecd396a5f279b4b66c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526040805190810160405280600481526020017f62616e6b00000000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000c30565b506201869f6001553480156200006657600080fd5b506200008062000143640100000000026401000000009004565b506200013c60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200011f5780601f10620000f3576101008083540402835291602001916200011f565b820191906000526020600020905b8154815290600101906020018083116200010157829003601f168201915b5050505050600154620002ef640100000000026401000000009004565b5062001332565b600080600080915061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620001a5906200114f565b602060405180830381600087803b158015620001c057600080fd5b505af1158015620001d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001fb919081019062000dfd565b820191508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000254906200119b565b602060405180830381600087803b1580156200026f57600080fd5b505af115801562000284573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002aa919081019062000dfd565b820191507f354acb8aa33680b7509e8fa1780f734894c0e7ca346b53477e9003e754a943cb82604051620002df919062000ff3565b60405180910390a1819250505090565b600080600080600080600080955060009450600093506200031f89620007b3640100000000026401000000009004565b809550819650505060008514151562000743576200034b62000b71640100000000026401000000009004565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620003b257600080fd5b505af1158015620003c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620003ed919081019062000da5565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620004469190620011e7565b600060405180830381600087803b1580156200046157600080fd5b505af115801562000476573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def42698896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620004d19190620010fb565b600060405180830381600087803b158015620004ec57600080fd5b505af115801562000501573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08a846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200055e929190620010a5565b602060405180830381600087803b1580156200057957600080fd5b505af11580156200058e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620005b4919081019062000dfd565b90506001811415620005ca57600095506200073d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95508273ffffffffffffffffffffffffffffffffffffffff166309ff42f08a8573ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200066f57600080fd5b505af115801562000684573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620006aa919081019062000d4d565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620006e592919062001071565b602060405180830381600087803b1580156200070057600080fd5b505af115801562000715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200073b919081019062000dfd565b505b62000767565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7f5cfaad425f027a82d4b8b23c1b6bcd52ffb72a443651e5bc7006623c0745a5b8868a8a6040516200079c9392919062001010565b60405180910390a185965050505050505092915050565b600080600080600080620007d562000b71640100000000026401000000009004565b93508373ffffffffffffffffffffffffffffffffffffffff1663d8ac5957888673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200085957600080fd5b505af11580156200086e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000894919081019062000d4d565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620008cf92919062001071565b602060405180830381600087803b158015620008ea57600080fd5b505af1158015620008ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000925919081019062000d79565b9250600091508273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200099057600080fd5b505af1158015620009a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620009cb919081019062000dfd565b6000141562000a03577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828191509550955062000b68565b8273ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000a5b919062001054565b602060405180830381600087803b15801562000a7657600080fd5b505af115801562000a8b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000ab1919081019062000da5565b905060008173ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000b0a90620010d9565b602060405180830381600087803b15801562000b2557600080fd5b505af115801562000b3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000b60919081019062000dfd565b819150955095505b50505050915091565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000bd0906200112d565b602060405180830381600087803b15801562000beb57600080fd5b505af115801562000c00573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000c26919081019062000dd1565b9050809250505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000c7357805160ff191683800117855562000ca4565b8280016001018555821562000ca4579182015b8281111562000ca357825182559160200191906001019062000c86565b5b50905062000cb3919062000cb7565b5090565b62000cdc91905b8082111562000cd857600081600090555060010162000cbe565b5090565b90565b600062000ced825162001255565b905092915050565b600062000d03825162001269565b905092915050565b600062000d1982516200127d565b905092915050565b600062000d2f825162001291565b905092915050565b600062000d458251620012a5565b905092915050565b60006020828403121562000d6057600080fd5b600062000d708482850162000cdf565b91505092915050565b60006020828403121562000d8c57600080fd5b600062000d9c8482850162000cf5565b91505092915050565b60006020828403121562000db857600080fd5b600062000dc88482850162000d0b565b91505092915050565b60006020828403121562000de457600080fd5b600062000df48482850162000d21565b91505092915050565b60006020828403121562000e1057600080fd5b600062000e208482850162000d37565b91505092915050565b62000e3481620012af565b82525050565b62000e4581620012c3565b82525050565b62000e56816200124b565b82525050565b62000e6781620012d7565b82525050565b600062000e7a8262001220565b80845262000e90816020860160208601620012eb565b62000e9b8162001321565b602085010191505092915050565b6000600b82527f61737365745f76616c75650000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f745f6173736574000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f745f7265636569707400000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f6163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601f82527f626f72726f7765722c206465627465652c206d6f6e65792c20737461747573006020830152604082019050919050565b60006020820190506200100a","","ffffffffffffffffffffffffffff95505b7fdbcf101c758d98f185c1ffe4f1826ab76273e8b53c51a13f6daed27c19a03ab8868c8c8c8c604051610d05959493929190613994565b60405180910390a18596505b505050505050949350505050565b600080600080600080610d30613039565b93508373ffffffffffffffffffffffffffffffffffffffff1663d8ac5957888673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610db357600080fd5b505af1158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610deb9190810190613216565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e24929190613a17565b602060405180830381600087803b158015610e3e57600080fd5b505af1158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e76919081019061323f565b9250600091508273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ee057600080fd5b505af1158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f1891908101906132ba565b60001415610f4e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82819150955095506110a7565b8273ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fa491906139fc565b602060405180830381600087803b158015610fbe57600080fd5b505af1158015610fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ff69190810190613268565b905060008173ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161104d90613b3f565b602060405180830381600087803b15801561106757600080fd5b505af115801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061109f91908101906132ba565b819150955095505b50505050915091565b6000806000606080600080600080600097506000965060026040519080825280602002602001820160405280156110f65781602001602082028038833980820191505090505b509550600260405190808252806020026020018201604052801561112e57816020015b60608152602001906001900390816111195790505b50945061113a8b6119ff565b80975081985082995050505060008714156117f05785600181518110151561115e57fe5b906020019060200201518a13156111d5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97507f9846b18f93f06e1334fd48481c6b3262958dc706d309eb257553bcfc0f673926888c8c6040516111c593929190613903565b60405180910390a1879850611853565b6111dd612f80565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561124357600080fd5b505af1158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061127b9190810190613268565b92508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112d29190613d18565b600060405180830381600087803b1580156112ec57600080fd5b505af1158015611300573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb486600081518110151561132f57fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113719190613ad5565b600060405180830381600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48660018151811015156113ce57fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114109190613cae565b600060405180830381600087803b15801561142a57600080fd5b505af115801561143e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def4269887600081518110151561146d57fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114af9190613d6d565b600060405180830381600087803b1580156114c957600080fd5b505af11580156114dd573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def426988b88600181518110151561150d57fe5b90602001906020020151036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115509190613dbb565b600060405180830381600087803b15801561156a57600080fd5b505af115801561157e573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68c858773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561160457600080fd5b505af1158015611618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061163c9190810190613216565b6040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161167693929190613a77565b602060405180830381600087803b15801561169057600080fd5b505af11580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116c891908101906132ba565b915060018214151561173a577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd97507f9846b18f93f06e1334fd48481c6b3262958dc706d309eb257553bcfc0f673926888c8c60405161172a93929190613903565b60405180910390a1879850611853565b61177585600181518110151561174c57fe5b9060200190602002015186600081518110151561176557fe5b906020019060200201518c6126c4565b90506000811415156117e7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc97507f9846b18f93f06e1334fd48481c6b3262958dc706d309eb257553bcfc0f673926888c8c6040516117d793929190613903565b60405180910390a1879850611853565b60009750611814565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff97505b7f9846b18f93f06e1334fd48481c6b3262958dc706d309eb257553bcfc0f673926888c8c60405161184793929190613903565b60405180910390a18798505b505050505050505092915050565b600080600080915061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118c190613bad565b602060405180830381600087803b1580156118db57600080fd5b505af11580156118ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061191391908101906132ba565b820191508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161196a90613c13565b602060405180830381600087803b15801561198457600080fd5b505af1158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119bc91908101906132ba565b820191507f354acb8aa33680b7509e8fa1780f734894c0e7ca346b53477e9003e754a943cb826040516119ef919061387a565b60405180910390a1819250505090565b600060608060008060006060806000611a16612f80565b95508573ffffffffffffffffffffffffffffffffffffffff1663d8ac59578b8873ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611a9957600080fd5b505af1158015611aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ad19190810190613216565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b0a929190613a17565b602060405180830381600087803b158015611b2457600080fd5b505af1158015611b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b5c919081019061323f565b9450600093506002604051908082528060200260200182016040528015611b925781602001602082028038833980820191505090505b5092506002604051908082528060200260200182016040528015611bca57816020015b6060815260200190600190039081611bb55790505b5091508473ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c3157600080fd5b505af1158015611c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c6991908101906132ba565b60001415611ca2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350838383985098509850612066565b8473ffffffffffffffffffffffffffffffffffffffff16633dd2b6","1460006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611cf891906139fc565b602060405180830381600087803b158015611d1257600080fd5b505af1158015611d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d4a9190810190613268565b90508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d9f90613d4d565b602060405180830381600087803b158015611db957600080fd5b505af1158015611dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611df191908101906132ba565b836000815181101515611e0057fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e6190613d9b565b602060405180830381600087803b158015611e7b57600080fd5b505af1158015611e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611eb391908101906132ba565b836001815181101515611ec257fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f2390613ab5565b600060405180830381600087803b158015611f3d57600080fd5b505af1158015611f51573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611f7a9190810190613324565b826000815181101515611f8957fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611fe990613c8e565b600060405180830381600087803b15801561200357600080fd5b505af1158015612017573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506120409190810190613324565b82600181518110151561204f57fe5b906020019060200201819052508383839850985098505b5050505050509193909250565b6000806000806000806000809550600094506000935061209289610d1f565b8095508196505050600085141515612485576120ac613039565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561211257600080fd5b505af1158015612126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061214a9190810190613268565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121a19190613c59565b600060405180830381600087803b1580156121bb57600080fd5b505af11580156121cf573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def42698896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122289190613b5f565b600060405180830381600087803b15801561224257600080fd5b505af1158015612256573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08a846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122b1929190613a47565b602060405180830381600087803b1580156122cb57600080fd5b505af11580156122df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061230391908101906132ba565b905060018114156123175760009550612480565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95508273ffffffffffffffffffffffffffffffffffffffff166309ff42f08a8573ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156123bb57600080fd5b505af11580156123cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123f39190810190613216565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161242c929190613a17565b602060405180830381600087803b15801561244657600080fd5b505af115801561245a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061247e91908101906132ba565b505b6124a9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7f5cfaad425f027a82d4b8b23c1b6bcd52ffb72a443651e5bc7006623c0745a5b8868a8a6040516124dc93929190613903565b60405180910390a185965050505050505092915050565b600080600080600080935060009250600091506000905061251387610d1f565b809250819350505060008214156126545785811215156125e75761256e88886040805190810160405280600481526020017f62616e6b00000000000000000000000000000000000000000000000000000000815250896102b4565b92506000831415156125e2577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd93507fd8651a423c64448335cd1fac67dbc373027f2af042de0e1d992f1bbc46e69824848989896040516125d29493929190613941565b60405180910390a18394506126b9565b61264f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe93507fd8651a423c64448335cd1fac67dbc373027f2af042de0e1d992f1bbc46e698248489898960405161263f9493929190613941565b60405180910390a18394506126b9565b612678565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93505b7fd8651a423c64448335cd1fac67dbc373027f2af042de0e1d992f1bbc46e69824848989896040516126ad9493929190613941565b60405180910390a18394505b505050509392505050565b60008060008060008060008060008097506000965060009550600094506126ea8c610d1f565b8097508198505050600087141515612764577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d6040516127549493929190613941565b60405180910390a1879850612f71565b61276d8b610d1f565b80965081985050506000871415156127e7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d6040516127d79493929190613941565b60405180910390a1879850612f71565b89861215612857577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d6040516128479493929190613941565b60405180910390a1879850612f71565b848a860112156128c9577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d6040516128b99493929190613941565b60405180910390a1879850612f71565b6128d1613039565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561293757600080fd5b505af115801561294b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061296f9190810190613268565b92508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129c69190613c59565b600060405180830381600087803b1580156129e057600080fd5b505af11580156129f4573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def426988b88036040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a4f9190613b5f565b600060405180830381600087803b158015612a6957600080fd5b505af1158015612a7d573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68d858773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612b0357600080fd5b505af1158015612b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b3b9190810190613216565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b7593929190613a77565b602060405180830381600087803b158015612b8f57600080fd5b505af1158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bc791908101906132ba565b9150600182141515612c3b577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d604051612c2b9493929190613941565b60405180910390a1879850612f71565b8373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612c9f57600080fd5b505af1158015612cb3573d6000803e3d6000fd5b505050506040513d601f","","52613cc781613767565b90508181036020830152613cdb818461361e565b905092915050565b60006040820190508181036000830152613cfc81613767565b90508181036020830152613d1081846135e8565b905092915050565b60006040820190508181036000830152613d318161379e565b90508181036020830152613d4581846135e8565b905092915050565b60006020820190508181036000830152613d668161380c565b9050919050565b60006040820190508181036000830152613d868161380c565b9050613d9560208301846135ca565b92915050565b60006020820190508181036000830152613db481613843565b9050919050565b60006040820190508181036000830152613dd481613843565b9050613de360208301846135ca565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613e0c57600080fd5b8060405250919050565b600067ffffffffffffffff821115613e2d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613ed782613ea2565b9050919050565b6000613ee982613ea2565b9050919050565b6000613efb82613ea2565b9050919050565b6000613f0d82613ea2565b9050919050565b6000819050919050565b6000613f2982613ea2565b9050919050565b6000613f3b82613ea2565b9050919050565b6000613f4d82613ec2565b9050919050565b82818337600083830152505050565b60005b83811015613f81578082015181840152602081019050613f66565b83811115613f90576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820547cdd9269ddc422a62067b3e157a3cdb119697b2fe375a11df0be9275388da96c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"selectAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_account\",\"type\":\"string\"},{\"name\":\"to_account\",\"type\":\"string\"},{\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"selectReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"financer\",\"type\":\"string\"},{\"name\":\"finance_money\",\"type\":\"int256\"}],\"name\":\"financeReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"repay_money\",\"type\":\"int256\"}],\"name\":\"repayReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"borrower\",\"type\":\"string\"},{\"name\":\"debtee\",\"type\":\"string\"},{\"name\":\"transaction_money\",\"type\":\"int256\"}],\"name\":\"createReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"original_id\",\"type\":\"string\"},{\"name\":\"new_id\",\"type\":\"string\"},{\"name\":\"newDebtee\",\"type\":\"string\"},{\"name\":\"divide_money\",\"type\":\"int256\"}],\"name\":\"divideReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTable\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateTableEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"borrower\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"debtee\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"CreateReceiptEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"original_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"new_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newDebtee\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"DivideReceiptEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"financer\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"FinanceReceiptEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"RepayReceiptEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_SELECTACCOUNT = "selectAccount";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_SELECTRECEIPT = "selectReceipt";

    public static final String FUNC_FINANCERECEIPT = "financeReceipt";

    public static final String FUNC_REPAYRECEIPT = "repayReceipt";

    public static final String FUNC_CREATERECEIPT = "createReceipt";

    public static final String FUNC_DIVIDERECEIPT = "divideReceipt";

    public static final String FUNC_CREATETABLE = "createTable";

    public static final String FUNC_REGISTER = "register";

    public static final Event CREATETABLEEVENT_EVENT = new Event("CreateTableEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event CREATERECEIPTEVENT_EVENT = new Event("CreateReceiptEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event DIVIDERECEIPTEVENT_EVENT = new Event("DivideReceiptEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event FINANCERECEIPTEVENT_EVENT = new Event("FinanceReceiptEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event REPAYRECEIPTEVENT_EVENT = new Event("RepayReceiptEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    protected Asset(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple2<BigInteger, BigInteger> selectAccount(String account) throws ContractException {
        final Function function = new Function(FUNC_SELECTACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt transfer(String from_account, String to_account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String from_account, String to_account, BigInteger asset_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String from_account, String to_account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<BigInteger, List<BigInteger>, List<String>> selectReceipt(String id) throws ContractException {
        final Function function = new Function(FUNC_SELECTRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, List<BigInteger>, List<String>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Int256>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt financeReceipt(String id, String financer, BigInteger finance_money) {
        final Function function = new Function(
                FUNC_FINANCERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(financer), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(finance_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void financeReceipt(String id, String financer, BigInteger finance_money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FINANCERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(financer), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(finance_money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFinanceReceipt(String id, String financer, BigInteger finance_money) {
        final Function function = new Function(
                FUNC_FINANCERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(financer), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(finance_money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getFinanceReceiptInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FINANCERECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getFinanceReceiptOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FINANCERECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt repayReceipt(String id, BigInteger repay_money) {
        final Function function = new Function(
                FUNC_REPAYRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(repay_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void repayReceipt(String id, BigInteger repay_money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REPAYRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(repay_money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRepayReceipt(String id, BigInteger repay_money) {
        final Function function = new Function(
                FUNC_REPAYRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(repay_money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRepayReceiptInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPAYRECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRepayReceiptOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REPAYRECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createReceipt(String id, String borrower, String debtee, BigInteger transaction_money) {
        final Function function = new Function(
                FUNC_CREATERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(borrower), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(debtee), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(transaction_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createReceipt(String id, String borrower, String debtee, BigInteger transaction_money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(borrower), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(debtee), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(transaction_money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateReceipt(String id, String borrower, String debtee, BigInteger transaction_money) {
        final Function function = new Function(
                FUNC_CREATERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(borrower), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(debtee), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(transaction_money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getCreateReceiptInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATERECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getCreateReceiptOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATERECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt divideReceipt(String original_id, String new_id, String newDebtee, BigInteger divide_money) {
        final Function function = new Function(
                FUNC_DIVIDERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(original_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(newDebtee), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(divide_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void divideReceipt(String original_id, String new_id, String newDebtee, BigInteger divide_money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DIVIDERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(original_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(newDebtee), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(divide_money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDivideReceipt(String original_id, String new_id, String newDebtee, BigInteger divide_money) {
        final Function function = new Function(
                FUNC_DIVIDERECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(original_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(newDebtee), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(divide_money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getDivideReceiptInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DIVIDERECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getDivideReceiptOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DIVIDERECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createTable() {
        final Function function = new Function(
                FUNC_CREATETABLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createTable(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATETABLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateTable() {
        final Function function = new Function(
                FUNC_CREATETABLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCreateTableOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATETABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt register(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String account, BigInteger asset_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<CreateTableEventEventResponse> getCreateTableEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATETABLEEVENT_EVENT, transactionReceipt);
        ArrayList<CreateTableEventEventResponse> responses = new ArrayList<CreateTableEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateTableEventEventResponse typedResponse = new CreateTableEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateTableEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATETABLEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateTableEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATETABLEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.asset_value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from_account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to_account = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.asset_value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<CreateReceiptEventEventResponse> getCreateReceiptEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERECEIPTEVENT_EVENT, transactionReceipt);
        ArrayList<CreateReceiptEventEventResponse> responses = new ArrayList<CreateReceiptEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateReceiptEventEventResponse typedResponse = new CreateReceiptEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.borrower = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.debtee = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateReceiptEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERECEIPTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateReceiptEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERECEIPTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DivideReceiptEventEventResponse> getDivideReceiptEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DIVIDERECEIPTEVENT_EVENT, transactionReceipt);
        ArrayList<DivideReceiptEventEventResponse> responses = new ArrayList<DivideReceiptEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DivideReceiptEventEventResponse typedResponse = new DivideReceiptEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.original_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.new_id = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.newDebtee = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDivideReceiptEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DIVIDERECEIPTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDivideReceiptEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DIVIDERECEIPTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FinanceReceiptEventEventResponse> getFinanceReceiptEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FINANCERECEIPTEVENT_EVENT, transactionReceipt);
        ArrayList<FinanceReceiptEventEventResponse> responses = new ArrayList<FinanceReceiptEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FinanceReceiptEventEventResponse typedResponse = new FinanceReceiptEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.financer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFinanceReceiptEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FINANCERECEIPTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFinanceReceiptEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FINANCERECEIPTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RepayReceiptEventEventResponse> getRepayReceiptEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REPAYRECEIPTEVENT_EVENT, transactionReceipt);
        ArrayList<RepayReceiptEventEventResponse> responses = new ArrayList<RepayReceiptEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RepayReceiptEventEventResponse typedResponse = new RepayReceiptEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRepayReceiptEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REPAYRECEIPTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRepayReceiptEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REPAYRECEIPTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Asset load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Asset(contractAddress, client, credential);
    }

    public static Asset deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Asset.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateTableEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String account;

        public BigInteger asset_value;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String from_account;

        public String to_account;

        public BigInteger asset_value;
    }

    public static class CreateReceiptEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String id;

        public String borrower;

        public String debtee;

        public BigInteger money;
    }

    public static class DivideReceiptEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String original_id;

        public String new_id;

        public String newDebtee;

        public BigInteger money;
    }

    public static class FinanceReceiptEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String id;

        public String financer;

        public BigInteger money;
    }

    public static class RepayReceiptEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String id;

        public BigInteger money;
    }
}
